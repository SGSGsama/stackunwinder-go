// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package bpfloader

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type Probes_SysEnterDataNoStack struct {
	_         structs.HostLayout
	Regs      [31]uint64
	Pc        uint64
	Sp        uint64
	Comm      [32]uint8
	ArgBuf    [3][512]uint8
	SyscallId uint64
	Tid       uint32
	_         [4]byte
	SigState  int64
}

type Probes_UprobeCommonData struct {
	_    structs.HostLayout
	Regs [31]uint64
	Pc   uint64
	Sp   uint64
	Tid  uint32
	Buf  [8][1024]uint8
	_    [4]byte
	Mask uint64
}

// LoadProbes_ returns the embedded CollectionSpec for Probes_.
func LoadProbes_() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Probes_Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Probes_: %w", err)
	}

	return spec, err
}

// LoadProbes_Objects loads Probes_ and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Probes_Objects
//	*Probes_Programs
//	*Probes_Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadProbes_Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadProbes_()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Probes_Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Probes_Specs struct {
	Probes_ProgramSpecs
	Probes_MapSpecs
	Probes_VariableSpecs
}

// Probes_ProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Probes_ProgramSpecs struct {
	CommonUprobe *ebpf.ProgramSpec `ebpf:"common_uprobe"`
	SysEnter     *ebpf.ProgramSpec `ebpf:"sys_enter"`
}

// Probes_MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Probes_MapSpecs struct {
	StackBaseAddrTable *ebpf.MapSpec `ebpf:"stackBaseAddrTable"`
	SysEnterRb         *ebpf.MapSpec `ebpf:"sysEnterRb"`
	TargetSyscalls     *ebpf.MapSpec `ebpf:"targetSyscalls"`
	TidStateMap        *ebpf.MapSpec `ebpf:"tidStateMap"`
	UprobeRb           *ebpf.MapSpec `ebpf:"uprobeRb"`
}

// Probes_VariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Probes_VariableSpecs struct {
	CLONE                   *ebpf.VariableSpec `ebpf:"CLONE"`
	CLONE3                  *ebpf.VariableSpec `ebpf:"CLONE3"`
	EXECVE                  *ebpf.VariableSpec `ebpf:"EXECVE"`
	EXECVEAT                *ebpf.VariableSpec `ebpf:"EXECVEAT"`
	FNV_64INIT              *ebpf.VariableSpec `ebpf:"FNV_64_INIT"`
	FNV_64PRIME             *ebpf.VariableSpec `ebpf:"FNV_64_PRIME"`
	GETRANDOM               *ebpf.VariableSpec `ebpf:"GETRANDOM"`
	NEWFSTATAT              *ebpf.VariableSpec `ebpf:"NEWFSTATAT"`
	OPENAT                  *ebpf.VariableSpec `ebpf:"OPENAT"`
	OPENAT2                 *ebpf.VariableSpec `ebpf:"OPENAT2"`
	PREAD64                 *ebpf.VariableSpec `ebpf:"PREAD64"`
	PTRACE                  *ebpf.VariableSpec `ebpf:"PTRACE"`
	PWRITE64                *ebpf.VariableSpec `ebpf:"PWRITE64"`
	READ                    *ebpf.VariableSpec `ebpf:"READ"`
	READLINKAT              *ebpf.VariableSpec `ebpf:"READLINKAT"`
	WRITE                   *ebpf.VariableSpec `ebpf:"WRITE"`
	Aarch64SyscallArgsCount *ebpf.VariableSpec `ebpf:"aarch64_syscall_args_count"`
	TargetPid               *ebpf.VariableSpec `ebpf:"targetPid"`
}

// Probes_Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadProbes_Objects or ebpf.CollectionSpec.LoadAndAssign.
type Probes_Objects struct {
	Probes_Programs
	Probes_Maps
	Probes_Variables
}

func (o *Probes_Objects) Close() error {
	return _Probes_Close(
		&o.Probes_Programs,
		&o.Probes_Maps,
	)
}

// Probes_Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadProbes_Objects or ebpf.CollectionSpec.LoadAndAssign.
type Probes_Maps struct {
	StackBaseAddrTable *ebpf.Map `ebpf:"stackBaseAddrTable"`
	SysEnterRb         *ebpf.Map `ebpf:"sysEnterRb"`
	TargetSyscalls     *ebpf.Map `ebpf:"targetSyscalls"`
	TidStateMap        *ebpf.Map `ebpf:"tidStateMap"`
	UprobeRb           *ebpf.Map `ebpf:"uprobeRb"`
}

func (m *Probes_Maps) Close() error {
	return _Probes_Close(
		m.StackBaseAddrTable,
		m.SysEnterRb,
		m.TargetSyscalls,
		m.TidStateMap,
		m.UprobeRb,
	)
}

// Probes_Variables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadProbes_Objects or ebpf.CollectionSpec.LoadAndAssign.
type Probes_Variables struct {
	CLONE                   *ebpf.Variable `ebpf:"CLONE"`
	CLONE3                  *ebpf.Variable `ebpf:"CLONE3"`
	EXECVE                  *ebpf.Variable `ebpf:"EXECVE"`
	EXECVEAT                *ebpf.Variable `ebpf:"EXECVEAT"`
	FNV_64INIT              *ebpf.Variable `ebpf:"FNV_64_INIT"`
	FNV_64PRIME             *ebpf.Variable `ebpf:"FNV_64_PRIME"`
	GETRANDOM               *ebpf.Variable `ebpf:"GETRANDOM"`
	NEWFSTATAT              *ebpf.Variable `ebpf:"NEWFSTATAT"`
	OPENAT                  *ebpf.Variable `ebpf:"OPENAT"`
	OPENAT2                 *ebpf.Variable `ebpf:"OPENAT2"`
	PREAD64                 *ebpf.Variable `ebpf:"PREAD64"`
	PTRACE                  *ebpf.Variable `ebpf:"PTRACE"`
	PWRITE64                *ebpf.Variable `ebpf:"PWRITE64"`
	READ                    *ebpf.Variable `ebpf:"READ"`
	READLINKAT              *ebpf.Variable `ebpf:"READLINKAT"`
	WRITE                   *ebpf.Variable `ebpf:"WRITE"`
	Aarch64SyscallArgsCount *ebpf.Variable `ebpf:"aarch64_syscall_args_count"`
	TargetPid               *ebpf.Variable `ebpf:"targetPid"`
}

// Probes_Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadProbes_Objects or ebpf.CollectionSpec.LoadAndAssign.
type Probes_Programs struct {
	CommonUprobe *ebpf.Program `ebpf:"common_uprobe"`
	SysEnter     *ebpf.Program `ebpf:"sys_enter"`
}

func (p *Probes_Programs) Close() error {
	return _Probes_Close(
		p.CommonUprobe,
		p.SysEnter,
	)
}

func _Probes_Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed probes__bpfel.o
var _Probes_Bytes []byte
